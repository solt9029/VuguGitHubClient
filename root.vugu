<div class="root">
	<input type="text" name="user" @change="data.HandleChange(event)">
	<button @click="data.HandleClick(event)">find repos</button>
	<div vg-if='data.IsLoading'>isLoading...</div>
	<div vg-if='data.Error != ""' vg-html='data.Error'></div>
	<div vg-if='len(data.Repos) > 0'>
		<ul>
			<li vg-for='_, repo := range data.Repos'>
				<a :href='repo.HtmlUrl' vg-html='repo.Name'></a>
			</li>
		</ul>
	</div>

	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
	<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
</div>

<script type="application/x-go">
import (
	"encoding/json"
	"log"
	"net/http"
)

type RootData struct {
	Repos     []Repo
	IsLoading bool
	User      string
	Error     string
}

type Repo struct {
	Name    string `json:"name"`
	HtmlUrl string `json:"html_url"`
}

func (data *RootData) HandleChange(event *vugu.DOMEvent) {
	data.User = event.JSEvent().Get("target").Get("value").String()
	log.Printf("user: %v", data.User)
}

func (data *RootData) HandleClick(event *vugu.DOMEvent) {
	data.Repos = []Repo{}
	eventEnv := event.EventEnv()
	data.IsLoading = true
	data.Error = ""

	go func() {
		eventEnv.Lock()
		defer eventEnv.UnlockRender()
		defer func() {
			data.IsLoading = false
		}()

		res, err := http.Get("https://api.github.com/users/" + data.User + "/repos")
		if err != nil {
			log.Printf("Error fetching: %v", err)
			data.Error = "Error fetching."
			return
		}
		defer res.Body.Close()

		var newRepos []Repo
		err = json.NewDecoder(res.Body).Decode(&newRepos)
		if err != nil {
			log.Printf("Error JSON decoding: %v", err)
			data.Error = "Error JSON decoding."
			return
		}

		data.Repos = newRepos
	}()
}
</script>
